/* tslint:disable */
/* eslint-disable */
/**
 * CodyLab Talent 2025 API
 * API for managing the CodyLab Talent 2025 project.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Error occurred - see status code and problem object for more information.
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * An absolute URI that identifies the problem type. When dereferenced,
     * it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML).
     * 
     * @type {string}
     * @memberof Problem
     */
    type?: string;
    /**
     * A short summary of the problem type. Written in English and readable
     * for engineers (usually not suited for non-technical stakeholders and
     * not localized).
     * 
     * @type {string}
     * @memberof Problem
     */
    title?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence
     * of the problem.
     * 
     * @type {number}
     * @memberof Problem
     */
    status?: number;
    /**
     * A human readable explanation specific to this occurrence of the
     * problem.
     * 
     * @type {string}
     * @memberof Problem
     */
    detail?: string;
    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     * 
     * @type {string}
     * @memberof Problem
     */
    instance?: string;
    /**
     * The category of the error.
     * @type {string}
     * @memberof Problem
     */
    errorCategory?: string;
    /**
     * The name of the field that caused the error.
     * @type {string}
     * @memberof Problem
     */
    fieldName?: string;
    /**
     * The timestamp when the error occurred.
     * @type {Date}
     * @memberof Problem
     */
    timestamp?: Date;
    /**
     * The trace ID for the error.
     * @type {string}
     * @memberof Problem
     */
    traceId?: string;
}

/**
 * Check if a given object implements the Problem interface.
 */
export function instanceOfProblem(value: object): value is Problem {
    return true;
}

export function ProblemFromJSON(json: any): Problem {
    return ProblemFromJSONTyped(json, false);
}

export function ProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Problem {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'status': json['status'] == null ? undefined : json['status'],
        'detail': json['detail'] == null ? undefined : json['detail'],
        'instance': json['instance'] == null ? undefined : json['instance'],
        'errorCategory': json['errorCategory'] == null ? undefined : json['errorCategory'],
        'fieldName': json['fieldName'] == null ? undefined : json['fieldName'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'traceId': json['traceId'] == null ? undefined : json['traceId'],
    };
}

export function ProblemToJSON(json: any): Problem {
    return ProblemToJSONTyped(json, false);
}

export function ProblemToJSONTyped(value?: Problem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'status': value['status'],
        'detail': value['detail'],
        'instance': value['instance'],
        'errorCategory': value['errorCategory'],
        'fieldName': value['fieldName'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'traceId': value['traceId'],
    };
}

