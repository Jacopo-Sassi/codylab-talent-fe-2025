/* tslint:disable */
/* eslint-disable */
/**
 * CodyLab Talent 2025 API
 * API for managing the CodyLab Talent 2025 project.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Tasks } from './Tasks';
import {
    TasksFromJSON,
    TasksFromJSONTyped,
    TasksToJSON,
    TasksToJSONTyped,
} from './Tasks';

/**
 * 
 * @export
 * @interface Projects
 */
export interface Projects {
    /**
     * Unique identifier of the project.
     * @type {number}
     * @memberof Projects
     */
    id?: number;
    /**
     * Project identification code.
     * @type {string}
     * @memberof Projects
     */
    code?: string;
    /**
     * Project name.
     * @type {string}
     * @memberof Projects
     */
    name?: string;
    /**
     * Project description.
     * @type {string}
     * @memberof Projects
     */
    description?: string;
    /**
     * Project start date.
     * @type {Date}
     * @memberof Projects
     */
    startDate?: Date;
    /**
     * Project duration in days.
     * @type {number}
     * @memberof Projects
     */
    duration?: number;
    /**
     * Project state (e.g., open, closed, deleted).
     * @type {string}
     * @memberof Projects
     */
    state?: ProjectsStateEnum;
    /**
     * Project manager name.
     * @type {string}
     * @memberof Projects
     */
    manager?: string;
    /**
     * 
     * @type {Array<Tasks>}
     * @memberof Projects
     */
    tasks?: Array<Tasks>;
}


/**
 * @export
 */
export const ProjectsStateEnum = {
    Open: 'open',
    Closed: 'closed',
    Deleted: 'deleted'
} as const;
export type ProjectsStateEnum = typeof ProjectsStateEnum[keyof typeof ProjectsStateEnum];


/**
 * Check if a given object implements the Projects interface.
 */
export function instanceOfProjects(value: object): value is Projects {
    return true;
}

export function ProjectsFromJSON(json: any): Projects {
    return ProjectsFromJSONTyped(json, false);
}

export function ProjectsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Projects {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'code': json['code'] == null ? undefined : json['code'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'duration': json['duration'] == null ? undefined : json['duration'],
        'state': json['state'] == null ? undefined : json['state'],
        'manager': json['manager'] == null ? undefined : json['manager'],
        'tasks': json['tasks'] == null ? undefined : ((json['tasks'] as Array<any>).map(TasksFromJSON)),
    };
}

export function ProjectsToJSON(json: any): Projects {
    return ProjectsToJSONTyped(json, false);
}

export function ProjectsToJSONTyped(value?: Projects | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'code': value['code'],
        'name': value['name'],
        'description': value['description'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString().substring(0,10)),
        'duration': value['duration'],
        'state': value['state'],
        'manager': value['manager'],
        'tasks': value['tasks'] == null ? undefined : ((value['tasks'] as Array<any>).map(TasksToJSON)),
    };
}

