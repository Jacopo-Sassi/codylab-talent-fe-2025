/* tslint:disable */
/* eslint-disable */
/**
 * CodyLab Talent 2025 API
 * API for managing the CodyLab Talent 2025 project.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  Slots,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SlotsFromJSON,
    SlotsToJSON,
} from '../models/index';

export interface CreateSlotRequest {
    slots: Slots;
}

export interface DeleteSlotRequest {
    id: number;
}

export interface GetSlotByIdRequest {
    id: number;
}

export interface GetSlotsRequest {
    pageNumber?: number;
    size?: number;
    sort?: string;
    ids?: string;
}

export interface UpdateSlotRequest {
    id: number;
    slots: Slots;
}

/**
 * 
 */
export class SlotsApi extends runtime.BaseAPI {

    /**
     * Creates a new slot and returns the created Slot object.
     * Create a new slot
     */
    async createSlotRaw(requestParameters: CreateSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slots>> {
        if (requestParameters['slots'] == null) {
            throw new runtime.RequiredError(
                'slots',
                'Required parameter "slots" was null or undefined when calling createSlot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/slots`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SlotsToJSON(requestParameters['slots']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotsFromJSON(jsonValue));
    }

    /**
     * Creates a new slot and returns the created Slot object.
     * Create a new slot
     */
    async createSlot(requestParameters: CreateSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slots> {
        const response = await this.createSlotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the slot corresponding to the provided ID.
     * Delete a slot by its ID
     */
    async deleteSlotRaw(requestParameters: DeleteSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSlot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/slots/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the slot corresponding to the provided ID.
     * Delete a slot by its ID
     */
    async deleteSlot(requestParameters: DeleteSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSlotRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the Slot object corresponding to the provided ID.
     * Retrieve a slot by its ID
     */
    async getSlotByIdRaw(requestParameters: GetSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slots>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSlotById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/slots/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotsFromJSON(jsonValue));
    }

    /**
     * Returns the Slot object corresponding to the provided ID.
     * Retrieve a slot by its ID
     */
    async getSlotById(requestParameters: GetSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slots> {
        const response = await this.getSlotByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Slot objects. You can filter by multiple slot IDs (e.g., 1,2,3) using the ids parameter.
     * Retrieve all slots
     */
    async getSlotsRaw(requestParameters: GetSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Slots>>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/slots`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SlotsFromJSON));
    }

    /**
     * Returns a list of Slot objects. You can filter by multiple slot IDs (e.g., 1,2,3) using the ids parameter.
     * Retrieve all slots
     */
    async getSlots(requestParameters: GetSlotsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Slots> | null | undefined > {
        const response = await this.getSlotsRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Updates the details of an existing slot and returns the updated Slot object.
     * Update an existing slot
     */
    async updateSlotRaw(requestParameters: UpdateSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slots>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSlot().'
            );
        }

        if (requestParameters['slots'] == null) {
            throw new runtime.RequiredError(
                'slots',
                'Required parameter "slots" was null or undefined when calling updateSlot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/slots/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SlotsToJSON(requestParameters['slots']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotsFromJSON(jsonValue));
    }

    /**
     * Updates the details of an existing slot and returns the updated Slot object.
     * Update an existing slot
     */
    async updateSlot(requestParameters: UpdateSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slots> {
        const response = await this.updateSlotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
